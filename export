import { createComponentFactory, Spectator } from '@ngneat/spectator/jest';
import { MyComponent } from './my.component';
import { BorrowerOutstandingModule } from '...';
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { CorporateOutstandingStoreFacade } from '...';
import { MockProvider } from 'ng-mocks'; // très utile
import { MockModule } from 'ng-mocks';

class MockCorporateOutstandingStoreFacade {
  readonly data$ = of([]);
  dispatch = jest.fn();
}

describe('MyComponent', () => {
  let spectator: Spectator<MyComponent>;

  const createComponent = createComponentFactory({
    component: MyComponent,
    imports: [
      BorrowerOutstandingModule, // 👈 Tu l'importes, mais on va override
    ],
    providers: [
      { provide: CorporateOutstandingStoreFacade, useClass: MockCorporateOutstandingStoreFacade },
    ],
    overrideModules: [
      {
        module: BorrowerOutstandingModule,
        remove: {
          imports: [
            StoreModule.forFeature, // ⛔️ désactive les features NgRx
            EffectsModule.forFeature,
          ],
          providers: [CorporateOutstandingStoreFacade], // si tu veux fournir le mock à la place
        },
        add: {
          providers: [MockProvider(CorporateOutstandingStoreFacade)], // ou ta propre classe mockée
        },
      },
    ],
  });

  beforeEach(() => {
    spectator = createComponent();
  });

  it('should work with mocked BorrowerOutstandingModule', () => {
    expect(spectator.component).toBeDefined();
  });
});