import { RequestHandlerStore } from './request-handler.store';
import { LoadingStatus } from '@http/model/loading-status.model';
import { HttpErrorResponse } from '@angular/common/http';
import { of, throwError } from 'rxjs';

describe('RequestHandlerStore', () => {
  let store: typeof RequestHandlerStore;

  beforeEach(() => {
    store = RequestHandlerStore;
  });

  it('devrait initialiser le store avec une map vide', () => {
    expect(store.requests().size).toBe(0);
  });

  describe('fetch', () => {
    it('devrait ajouter une requête et la passer en état IN_PROGRESS', () => {
      const requestToHandle = {
        name: 'test-request',
        request: of(null), // Simule une requête réussie immédiatement
      };

      store.fetch(requestToHandle).subscribe();

      const request = store.requests().get('test-request');
      expect(request).toBeDefined();
      expect(request?.status()).toBe(LoadingStatus.IN_PROGRESS);
    });

    it('devrait mettre à jour le statut en SUCCESS en cas de succès', () => {
      const requestToHandle = {
        name: 'test-request',
        request: of(null), // Simule une requête qui réussit
      };

      store.fetch(requestToHandle).subscribe();

      const request = store.requests().get('test-request');
      expect(request?.status()).toBe(LoadingStatus.SUCCESS);
      expect(request?.error()).toBeNull();
    });

    it('devrait mettre à jour le statut en FAILURE en cas d\'erreur', () => {
      const errorResponse = new HttpErrorResponse({ status: 500, statusText: 'Internal Server Error' });

      const requestToHandle = {
        name: 'test-request',
        request: throwError(() => errorResponse), // Simule une requête qui échoue
      };

      store.fetch(requestToHandle).subscribe({
        error: () => {
          const request = store.requests().get('test-request');
          expect(request?.status()).toBe(LoadingStatus.FAILURE);
          expect(request?.error()).toBe(errorResponse);
        }
      });
    });
  });

  describe('isLoading', () => {
    it('devrait retourner true si une requête est en cours', () => {
      const requestToHandle = {
        name: 'test-request',
        request: of(null),
      };

      store.fetch(requestToHandle).subscribe();
      expect(store.isLoading('test-request')()).toBe(true);
    });

    it('devrait retourner false si la requête est terminée', () => {
      const requestToHandle = {
        name: 'test-request',
        request: of(null),
      };

      store.fetch(requestToHandle).subscribe();
      expect(store.isLoading('test-request')()).toBe(false);
    });
  });

  describe('getError', () => {
    it('devrait retourner l\'erreur si une requête a échoué', () => {
      const errorResponse = new HttpErrorResponse({ status: 500, statusText: 'Internal Server Error' });

      const requestToHandle = {
        name: 'test-request',
        request: throwError(() => errorResponse),
      };

      store.fetch(requestToHandle).subscribe({
        error: () => {
          expect(store.getError('test-request')()).toBe(errorResponse);
        }
      });
    });

    it('devrait retourner null si aucune erreur n\'existe', () => {
      const requestToHandle = {
        name: 'test-request',
        request: of(null),
      };

      store.fetch(requestToHandle).subscribe();
      expect(store.getError('test-request')()).toBeNull();
    });
  });
});