import { createServiceFactory, SpectatorService } from '@ngneat/spectator';
import { MyService } from './my-service.service';
import { Observable } from 'rxjs';

describe('MyService', () => {
  let spectator: SpectatorService<MyService>;
  const createService = createServiceFactory(MyService);

  beforeEach(() => {
    spectator = createService();
  });

  it('should return an object with 4 observables', (done) => {
    const result = spectator.service.getObjectWithObservables();

    // Vérification des clés de l'objet
    expect(result).toBeDefined();
    expect(result.observable1$).toBeInstanceOf(Observable);
    expect(result.observable2$).toBeInstanceOf(Observable);
    expect(result.observable3$).toBeInstanceOf(Observable);
    expect(result.observable4$).toBeInstanceOf(Observable);

    // Tester les valeurs des observables
    let completedCount = 0;

    result.observable1$.subscribe((value) => {
      expect(value).toBe('value 1');
      checkIfDone();
    });

    result.observable2$.subscribe((value) => {
      expect(value).toBe(42);
      checkIfDone();
    });

    result.observable3$.subscribe((value) => {
      expect(value).toBe(true);
      checkIfDone();
    });

    result.observable4$.subscribe((value) => {
      expect(value).toEqual({ key: 'value' });
      checkIfDone();
    });

    // Fonction pour terminer le test une fois tous les observables complétés
    function checkIfDone() {
      completedCount++;
      if (completedCount === 4) {
        done();
      }
    }
  });
});